@startuml
/' @author @WillySeahh'/
/' Got inspiration and adapted
from https://github.com/AY1920S2-CS2103T-W12-1/main/blob/master/docs/images/DeliveredClassDiagram.png '/

skinparam backgroundColor #ffffff
skinparam classAttributeIconSize 0
hide circle

class PaidCommandParser implements Parser {
    /' Methods '/
    + parse(args : String) : PaidCommand
}

interface Parser<T extends Command> <<Interface>> {
    parse(userInput : String) : PaidCommand

}

abstract class Command <E> {
    {abstract} execute(model : E) : CommandResult
}

class PaidCommand extends Command {
    /' Fields '/
    - indexOfPersonPaid : Index
    - amountPaid : String

    /' Methods '/
    + execute(splitterModel : SplitterModel) : CommandResult
    + equals() : boolean
}

interface SplitterModel <<Interface>> {
    + addEntry(entry : Entry) : void
    + deleteEntry(index : int) : void
    + getEntry(entry : Entry) : Entry
    + paidPerson(person : Person, amountPaid : String) : void
    + listAmount() : String
    + listReceipt() : String
    + getReceipt() : Receipt
    + clearReceipt() : void
    + hasPerson(person : Person) : boolean
    + addPerson(person : Person) : void
    + getPerson(person : Person) : Person
    + addAmount(person : Person, amount : Amount) : void
    + removeAmount(person : Person, amount : Amount) : void
    + updateFilteredPersonList(predicate : Predicate<Person>) : void
    + getFilteredPersonList() : ObservableList<Person>

}

class Index {
    + getZeroBased() : int
    + getOneBased() : int
}



class SplitterModelManager implements SplitterModel {
    /' Fields '/
    - PersonAmountBook : personAmountBook

    /' Methods '/
    + listAmount() : String
    + paidPerson(person : Person, amountPaid : String) : void
}

interface ReadOnlyPersonAmountBook <<Interface>> {

        + getPersonList() : ObservableList<Person>
        + getPersonByIndex(indexOfPerson : int) : Person

}

class Person {
     /' Fields '/
     - name : Name
     - amount : Amount

     /' Methods '/
     + removeAmount(amount : Amount) : void
     + getAmount() :Amount
}

class Amount{
    /' Fields '/
    + amount : BigDecimal

    /' Methods '/
    + isValidAmount(test : BigDecimal) : boolean
    + getBigDecimal() : BigDecimal
}




PaidCommandParser ..> PaidCommand
PaidCommand ..> SplitterModel
PaidCommandParser ..> Index
PaidCommand --> Index
PaidCommand --> ReadOnlyPersonAmountBook
PaidCommand --> Person
Person *-right->"1" Amount


@enduml
