@startuml
!include style.puml

box Model MODEL_COLOR_T1
participant ":FilteredList" as FilteredList MODEL_COLOR
end box

box Predicate LOGIC_COLOR_T1
participant "pred:Predicate" as Predicate LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Task" as Task MODEL_COLOR
end box

box Predicate LOGIC_COLOR_T1
participant "<<class>>\n:StringUtil" as StringUtil LOGIC_COLOR
end box

[-> FilteredList : setPredicate(pred)
activate FilteredList

FilteredList -> Predicate: test(task)
activate Predicate

Predicate -> Task: getName()
activate Task
Task -> Predicate: name
deactivate Task

Predicate -> Predicate: score = 2

group name score
    Predicate-[hidden]-> StringUtil
    Predicate-[hidden]-> StringUtil
end

group tag score
    Predicate-[hidden]-> Task
    Predicate-[hidden]-> Task
end

alt score < 2
Predicate -> FilteredList: true
else else
Predicate -> FilteredList: false
end
deactivate Predicate

[<--FilteredList
deactivate FilteredList
@enduml

loop tags of search term
        Predicate -> Task: hasTag(tag)
        activate Task
        Task -> Predicate
        deactivate Task
        opt Task contains tag
            Predicate -> Predicate: score -= 1
        end
    end

loop chunks of task name
    Predicate -> StringUtil: limitedCompare(chunk,\n search, threshold)
    activate StringUtil
    StringUtil -> Predicate: editDistance
    deactivate StringUtil

    alt search matches start of chunk
        Predicate -> Predicate: temp = 1
    else edit distance < 2
        Predicate -> Predicate: temp = 1
    else search equals chunk
        Predicate -> Predicate: temp = 0
    end

    opt temp < score
        Predicate -> Predicate: score = temp
    end
end
