@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class ModuloParser
Class XYZCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
Class AcademicYearParser
}

package Command {
Class XYZCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
}

package Writer {
Class IcsEvent
Class IcsRRule
Class IcsDeadline
Class IcsWriter
}

Interface Logic <<Interface>>
Class LogicManager
Class AddModuleStatefulLogicManager
Class IcsWriter
Class AddModuleCommandResult

Interface StatefulLogic <<Interface>>
}

package Model{
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .up.|> Logic
LogicManager -->"1" ModuloParser
ModuloParser .left.|> XYZCommandParser: creates >

XYZCommandParser ..> XYZCommand : creates >
XYZCommandParser ..|> Parser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> Command
LogicManager .left.> Command : executes >

IcsEvent ..> IcsWriter
IcsEvent --> IcsRRule
IcsEvent --> IcsDeadline

IcsEvent ..> Model
IcsDeadline ..> Model
IcsWriter ..> Model

XYZCommand .right.> IcsWriter

AddModuleCommandResult -left-|> CommandResult
AddModuleCommandResult ..> Model

LogicManager --> Model
Command .right.> Model
ParserUtil ..> AcademicYearParser
note left of XYZCommand: XYZCommand = AddCommand, \nFindCommand, etc
Logic ..> CommandResult
StatefulLogic .down.> CommandResult
LogicManager .down.> CommandResult
LogicManager *-> StatefulLogic
AddModuleStatefulLogicManager .left.> StatefulLogic
AddModuleStatefulLogicManager --> Model
Command .up.> CommandResult
CommandResult -[hidden]-> Parser
@enduml
