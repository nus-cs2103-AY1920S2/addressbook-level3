@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface CommonParser <<Interface>>
Class Prefix
Class ArgumentMultimap
Class ArgumentTokenizer
Interface Parser <<Interface>>
Class XYZCommandParser
Class MODEParserUtil
Class MODEParser
Class MODECliSyntax
}

package Command {
Class XYZCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
}

Interface Logic <<Interface>>
Interface MODELogic <<Interface>>
Class MODELogicManager
}

MODELogic -up-|> Logic
MODELogicManager .up.|> MODELogic
MODELogicManager -->"1" CommonParser

MODEParser .right.|> CommonParser
MODEParser .left.> XYZCommandParser: creates >
XYZCommandParser ..|> Parser
XYZCommandParser ..> MODECliSyntax
XYZCommandParser ..> MODEParserUtil
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
MODECliSyntax ..> Prefix
MODEParserUtil ..> Prefix
ArgumentTokenizer ..> Prefix
XYZCommandParser ..> XYZCommand: creates >

ArgumentTokenizer .[hidden]left.> MODEParserUtil
MODEParserUtil .[hidden]left.> MODECliSyntax

Logic ..> CommandResult
MODELogic ..> CommandResult
MODELogicManager ..> CommandResult
MODELogicManager ..> Command: execute >
MODELogicManager --> Model

XYZCommand -up-|> Command
Command .up.> CommandResult
Command .right.> Model
note right of XYZCommand: XYZCommand = AddCommand, \nHeightCommand, AddItemCommand, \nListAmountCommand, etc
note left of MODELogic: MODELogic = DietLogic or \nSplitterLogic

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

package Model{
Class HiddenModel #FFFFFF
}

@enduml
