@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class NormalParser
Class InterviewParser
Class PreSessionParser
Class XYZCommandParser
Class CliSyntax
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class XYZCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
}

Interface Logic <<Interface>>
Class LogicManager
}

package Model{
Class HiddenModel #FFFFFF
}

package Storage{
Class HiddenStorage #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic
Storage -up[hidden]- Model

LogicManager --> Model
LogicManager --> Storage
LogicManager .up.|> Logic
LogicManager -->"1" PreSessionParser
LogicManager -->"1" InterviewParser
LogicManager -->"1" NormalParser
InterviewParser .down.> XYZCommandParser: creates >
NormalParser .down.> XYZCommandParser: creates >
PreSessionParser .down.> XYZCommandParser: creates >

XYZCommandParser ..> XYZCommand : creates >
XYZCommandParser ..|> Parser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> Command
LogicManager .left.> Command : executes >

note bottom of XYZCommand : XYZCommand = AddAttributeCommand, \nFinalizeCommand, etc
note right of CommandResult : CommandResult \nhas multiple subclasses, \neg. ToggleCommandResult, \nNavigationCommandResult, \nHelpCommandResult, \nExitCommandResult


Command .up.> CommandResult : returns >
Command .right.> Model : accesses and modifies >
Command .right.> Storage : saves model to >
@enduml
