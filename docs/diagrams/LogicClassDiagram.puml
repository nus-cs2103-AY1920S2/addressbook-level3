@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Model {}
package Storage {}

package Logic as LogicPkg {

    Interface Logic <<Interface>>
    Class LogicManager

    package Parser as ParserPkg {
        Interface Parser <<Interface>>
        Class TaTrackerParser

        Parser .up[hidden]..> TaTrackerParser
    }

    package Commands as CommandPkg {
        Class CommandResult
        Class "{abstract}\nCommand" as Command

        CommandResult <.left. Command
    }

    Logic .down.> CommandResult

    Logic <|.left. LogicManager

    LogicManager -right-> "1" TaTrackerParser
    LogicManager .down.> CommandResult
    LogicManager .down.> Command
}

Class HiddenOutside #FFFFFF
'HiddenOutside .[hidden]down.> LogicPkg
HiddenOutside .down.> Logic

LogicManager -up-> Storage

LogicManager -right-> Model
Command .right.> Model

@enduml

@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {
    package Parser as ParserPkg {

        Class TaTrackerParser
        Interface Parser <<Interface>>


        package X as ModelParser {
            Class XCommandParser
            Class XYCommandParser

            TaTrackerParser .down.> XCommandParser
            XCommandParser .down.> XYCommandParser
        }

        XYCommandParser .right.|> Parser

        Class Prefix

        Class Prefixes

        Class ArgumentTokenizer
        Class ArgumentMultimap

        Class ParserUtil


        Prefixes -right[hidden]- ParserUtil

        XYCommandParser .down.> ArgumentMultimap
        XYCommandParser .down.> ArgumentTokenizer
        XYCommandParser .down[#Red].> Prefixes
        XYCommandParser .down.> ParserUtil

        ArgumentTokenizer .right.> ArgumentMultimap

        ArgumentTokenizer .down.> Prefix
        ParserUtil .down.> Prefix
        Prefixes -down-> "*" Prefix
    }

    package Commands as ModelCommand {
        package X {
            Class XYCommand
        }

        Class CommandResult
        Class "{abstract}\nCommand" as Command

        Command .up.> CommandResult
        XYCommand -up-|> Command

        XYCommand .down[LOGIC_COLOR_T4].> Prefixes
    }

    XYCommandParser .right.> XYCommand
}
@enduml

@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {
    package Parser as ParserPkg {

        Class TaTrackerParser
        Interface Parser <<Interface>>


        package X as ModelParser {
            Class XCommandParser

            TaTrackerParser ..down[#Red].> XCommandParser
        }

        XCommandParser .right.|> Parser
    }

    package Commands as ModelCommand {
        package X {
            Class XCommand
        }

        Class CommandResult
        Class "{abstract}\nCommand" as Command

        Command .up.> CommandResult
        XCommand -up-|> Command
    }

    XCommandParser .right.> XCommand
}
@enduml

@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {
    package Parser as ParserPkg {

        Class TaTrackerParser
        Interface Parser <<Interface>>


        package X as ModelParser {
            Class XCommandParser
            Class XYCommandParser

            TaTrackerParser .down.> XCommandParser
            XCommandParser .down.> XYCommandParser
        }

        XYCommandParser .right.|> Parser

        Class Prefix

        Class ArgumentTokenizer
        Class ArgumentMultimap

        Class ParserUtil


        XYCommandParser .down.> ArgumentMultimap
        XYCommandParser .down.> ArgumentTokenizer
        XYCommandParser .down.> ParserUtil

        ArgumentTokenizer .right.> ArgumentMultimap

        ArgumentTokenizer .down.> Prefix
        ParserUtil .down.> Prefix

    }

    package Commands as ModelCommand {
        package X {
            Class XYCommand
        }

        Class Prefixes #RED

        Class CommandResult
        Class "{abstract}\nCommand" as Command

        Command .up.> CommandResult
        XYCommand -up-|> Command

        XYCommand .down[LOGIC_COLOR_T4].> Prefixes
    }

    XYCommandParser .down[#RED].> Prefixes

    Prefixes -right[hidden]- ParserUtil
    Prefixes -down-> "*" Prefix

    XYCommandParser .right.> XYCommand
}
@enduml
