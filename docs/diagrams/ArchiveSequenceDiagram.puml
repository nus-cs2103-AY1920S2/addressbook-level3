@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant "r:RemovalBasedCommand" as RemovalBasedCommand LOGIC_COLOR
end box

[-> LogicManager : execute("archive s/rejected")

activate LogicManager
'        add spacing
RemovalBasedCommand -[hidden]-> RemovalBasedCommand

'Parsing of removal-based command execution type'
ref over LogicManager, RemovalBasedCommand : parse and create RemovalBasedCommand
'        add spacing
RemovalBasedCommand -[hidden]-> RemovalBasedCommand

LogicManager -> RemovalBasedCommand : execute(model)

    activate RemovalBasedCommand
    '        add spacing
    RemovalBasedCommand -[hidden]-> RemovalBasedCommand

    'Generating lazy command based on command word'
    ref over RemovalBasedCommand : generate lazy removal-based command

    '        add spacing
    RemovalBasedCommand -[hidden]-> RemovalBasedCommand

'    alt #white BY_INDEX
'    RemovalBasedCommand -> RemovalBasedCommand : executeByIndex(model, lazyCommand)
'        activate RemovalBasedCommand
'            'Construct and execute lazy removal-based command by index'
'            ref over RemovalBasedCommand : construct and execute lazy removal-based command by index
'            ref over RemovalBasedCommand : create command result
'            RemovalBasedCommand --> RemovalBasedCommand : cr
'            deactivate RemovalBasedCommand
'        '        add spacing
'        RemovalBasedCommand -[hidden]-> RemovalBasedCommand
'
'    else BY_INDICES
'    RemovalBasedCommand -> RemovalBasedCommand : executeByIndices(model, lazyCommand)
'        activate RemovalBasedCommand
'        RemovalBasedCommand -> RemovalBasedCommand : checkValidIndices(model, indices)
'            activate RemovalBasedCommand
'            RemovalBasedCommand --> RemovalBasedCommand
'            deactivate RemovalBasedCommand
'            '        add spacing
'            RemovalBasedCommand -[hidden]-> RemovalBasedCommand
'            'Construct and execute lazy removal-based command by indices'
'            ref over RemovalBasedCommand : construct and execute lazy removal-based command by indices
'            ref over RemovalBasedCommand : create command result
'            RemovalBasedCommand --> RemovalBasedCommand : cr
'            deactivate RemovalBasedCommand
'        '        add spacing
'        RemovalBasedCommand -[hidden]-> RemovalBasedCommand
'
'
'    else BY_FIELD
    RemovalBasedCommand -> RemovalBasedCommand : executeByField(model, lazyCommand)
        activate RemovalBasedCommand
            RemovalBasedCommand -> RemovalBasedCommand : getPredicateFilteredInternshipApplications(model)
            activate RemovalBasedCommand
            RemovalBasedCommand --> RemovalBasedCommand : internshipApplicationsToExecuteOn
            deactivate RemovalBasedCommand
            '        add spacing
            RemovalBasedCommand -[hidden]-> RemovalBasedCommand
            RemovalBasedCommand -> RemovalBasedCommand : convertInternshipApplicationsToIndices(internshipApplicationsToExecuteOn)
            activate RemovalBasedCommand
            RemovalBasedCommand --> RemovalBasedCommand : indices
            deactivate RemovalBasedCommand
            '        add spacing
            RemovalBasedCommand -[hidden]-> RemovalBasedCommand
            'Construct and execute lazy removal-based command by indices'
            ref over RemovalBasedCommand : construct and execute lazy removal-based command by indices
            ref over RemovalBasedCommand : create command result
            RemovalBasedCommand --> RemovalBasedCommand : cr
            deactivate RemovalBasedCommand
        '        add spacing
        RemovalBasedCommand -[hidden]-> RemovalBasedCommand

'    end alt

    RemovalBasedCommand --> LogicManager : cr

    deactivate RemovalBasedCommand

[<--LogicManager : cr
deactivate LogicManager

@enduml
